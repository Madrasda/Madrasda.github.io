import Head from 'next/head';
import Image from 'next/image';
import VendorLayout from '@/components/layout-vendor';
import UploadModal from '@/components/upload-modal';
import Link from 'next/link';
import axios from "axios";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { isTokenValid } from "@/utils/JWTVerifier"

export default function CreateTemplate(props) {
  const [tokenExists, setTokenExists] = useState(false);
  const [selectedColors, setSelectedColors] = useState([]);
  const [position, setPosition] = useState("");
  const [front, setFront] = useState(true);
  const router = useRouter();
  const {id, audience, email} = router.query;
  const isReady = router.isReady;
  const [details, setDetails] = useState(null);

  useEffect(() => {
    if(isReady)
        getMockupDetails();
  }, [isReady]);

  useEffect(() => {
    const jwtToken = localStorage.getItem("token")
    if(jwtToken === undefined || !isTokenValid(jwtToken))
      router.push("/vendor");
    else
      setTokenExists(true);
  }, []);

  useEffect(() => {
    console.log(selectedColors);
  }, [selectedColors])

  const getMockupDetails = async () => {
    const response = await axios.get(
        "http://localhost:8080/api/mockup/getMockup/" + id
    );
    setDetails(response.data);
  }

  const handleColorSelection = (selectedColor) => {
      if (selectedColors.includes(selectedColor)) {
        setSelectedColors(selectedColors.filter(color => color !== selectedColor));
      } else {
        setSelectedColors([...selectedColors, selectedColor]);
      }
}

  const getAvailableSizes = (skuMapping) => {
        var availableSizes = []
        skuMapping.forEach(sku => {
            if(!availableSizes.includes(sku.size.size))
                availableSizes.push(sku.size.size);
        });
        return availableSizes;
  }

  const getAvailableColors = (skuMapping) => {
        var availableColors = []
        skuMapping.forEach(sku => {
            if(availableColors.findIndex((item) => item.id === sku.color.id) === -1){
                availableColors.push({id : sku.color.id, hexValue : sku.color.hexValue});
            }
        });
        return availableColors;
  }

  if(!isReady)
    return <div>Loading...</div>

  return (
    <>
    <Head>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/logo.png" />
      <title>Madrasda | Create Template</title>
    </Head>

    <VendorLayout>
    <section className="body-font font-algeria overflow-hidden
                        md:ml-56
                        lg:ml-36">
    <div className="px-5 my-10 mx-auto">
    <h1 className="text-3xl text-primary lg:ml-20 md:mt-10">CREATE TEMPLATE</h1>
      <div className="px-5 py-10 mx-auto flex justify-center">
        <div className="lg:w-5/6 flex justify-start flex-col
                        lg:flex-row">
          <div className='flex flex-col items-center bg-[#F0F0F0] p-4'>
            <div className='flex'>
              <button className={`text-xs rounded-full border-2 px-3 py-2 mx-1 border-gray ${position==="Center" ? 'bg-primary text-white' : 'bg-off-white'}`} value="Center" onClick={(e) => setPosition(e.target.value)}>Center</button>
              <button className={`text-xs rounded-full border-2 px-3 py-2 mx-1 border-gray ${position==="Top Left Corner" ? 'bg-primary text-white' : 'bg-off-white'}`} value="Top Left Corner" onClick={(e) => setPosition(e.target.value)}>Top Left Corner</button>
              <button className={`text-xs rounded-full border-2 px-3 py-2 mx-1 border-gray ${position==="Bottom Left Corner" ? 'bg-primary text-white' : 'bg-off-white'}`} value="Bottom Left Corner" onClick={(e) => setPosition(e.target.value)}>Bottom Left Corner</button>
              <button className={`text-xs rounded-full border-2 px-3 py-2 mx-1 border-gray ${position==="Top Right Corner" ? 'bg-primary text-white' : 'bg-off-white'}`} value="Top Right Corner" onClick={(e) => setPosition(e.target.value)}>Top Right Corner</button>
              <button className={`text-xs rounded-full border-2 px-3 py-2 mx-1 border-gray ${position==="Bottom Right Corner" ? 'bg-primary text-white' : 'bg-off-white'}`} value="Bottom Right Corner" onClick={(e) => setPosition(e.target.value)}>Bottom Right Corner</button>
            </div>
            {
                details && 
                <img
                    alt="ecommerce"
                    className="w-full mt-2 lg:h-[620px] object-contain object-center rounded aspect-16/9"
                    src={front ? details.frontImage : details.backImage}
                />
            }
          </div>
          <div className="w-full mt-6
                          lg:pl-10 lg:py-6 lg:mt-0 lg:w-1/2">
            <h1 className="text-gray-900 text-3xl title-font font-medium mb-1">
              {details && details.name}
            </h1>
            <h1 className="text-primary capitalize text-2xl title-font font-medium mb-1">
              {audience}
            </h1>
            <UploadModal />

            <div className='mt-6'>
            <p className='mb-2'>Select Side for Design</p>
            <div className='flex flex-row'>
              <button className={`text-sm rounded-full border-2 border-bg px-7 py-2 mr-2 ${front ? "bg-primary text-white" : ""}`} onClick={() => setFront(true)}>Front</button>
              <button className={`text-sm rounded-full border-2 border-bg px-7 py-2 mr-2 ${!front ? "bg-primary text-white" : ""}`} onClick={() => setFront(false)}>Back</button>
            </div>
            </div>

            <div className="mt-6">Colors</div>
            <div className="flex justify-start items-center mt-3 mb-3">
                <div className="relative">
                    <div className="flex flex-wrap space-x-1">
                        {
                        details && 
                        getAvailableColors(details.skuMapping).map((color) => {
                            return (
                                <div className='flex flex-col justify-center items-center px-2' key={color.id}>
                                  <button
                                    className={`border-2 border-gray rounded-full w-10 h-10 focus:outline-none ${
                                      selectedColors.findIndex((selectedColor) => selectedColor === color.id) !== -1
                                        ? 'border-primary border-[3px]'
                                        : ''
                                    }`} onClick={() => handleColorSelection(color.id)}
                                    style={{backgroundColor : color.hexValue}}
                                    // onClick={() => handleColorSelection(color.id, color.color)}
                                  ></button>
                                  <p className='text-[10px] mx-auto'>{color.color}</p>
                                </div>
                            );
                        })
                    }
                    </div>
                </div>
              </div>
              <div className="mt-6">Available Sizes</div>
              <div className="flex flex-wrap justify-start items-center mt-3 mb-3 ml-2">
                <div className="relative">
                  {details &&
                    getAvailableSizes(details.skuMapping).map((size) => {
                      return (
                        <button
                          key={size}
                          className={`w-14 text-sm justify-center mr-5 transition-colors duration-150 border rounded-lg focus:shadow-outline text-white border-gray bg-primary hover:text-white hover:border-primary'}`}
                        >
                          {size}
                        </button>
                      );
                    })}
                </div>
              </div>
              <br></br>
            <div className="flex">
              <Link href="/vendor/productupload">
              <button className= "flex text-white bg-[#a5153F] border-0 py-3 px-10 focus:outline-none hover:bg-primary rounded-full">
                Save Template
              </button>
              </Link>
            </div>
            <br></br>
          </div>
        </div>
      </div>
      </div>
    </section>
    </VendorLayout>
    </>
  );
}
