import Head from "next/head";
import Image from "next/image";
import AdminLayout from "@/components/layout-admin";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { getRole, isTokenValid } from "@/utils/JWTVerifier";
import axios from "axios";
import {
  Alert,
  Backdrop,
  Button,
  CircularProgress,
  Input,
  InputLabel,
  MenuItem,
  Select,
  Snackbar,
} from "@mui/material";
import { uuidv4 } from "@firebase/util";
import { Edit, Upload } from "@mui/icons-material";
import { Textarea } from "@nextui-org/react";

export default function EditMockup() {
  const router = useRouter();
  const { id } = router.query;
  const isReady = router.isReady;
  const [details, setDetails] = useState(null);
  const [edit, setEdit] = useState(false);
  const [name, setName] = useState(null);
  const [productType, setProdType] = useState(null);
  const [category, setCategory] = useState(null);
  const [model, setModel] = useState(null);
  const [info, setInfo] = useState(null);
  const [height, setHeight] = useState(null);
  const [breadth, setBreadth] = useState(null);
  const [length, setLength] = useState(null);
  const [weight, setWeight] = useState(null);
  const [tax, setTax] = useState(null);
  const [hsn, setHsn] = useState(null);
  const [base, setBase] = useState(null);
  const [spinner, setSpinnerState] = useState(false); //spinner
  const [message, setMessage] = useState("");
  const [severity, setSeverity] = useState("");
  const [open, setOpen] = useState(false);

  const handleClose = (event, reason) => {
    console.log(reason);
    if (reason === "clickaway") {
      return;
    }
    setOpen(false);
  };

  useEffect(() => {
    if (isReady) getMockupDetails();
  }, [isReady]);

  const getMockupDetails = async () => {
    const response = await axios.get(
      "https://spring-madrasda-2f6mra4vwa-em.a.run.app/api/mockup/getMockup/" +
        id
    );
    setDetails(response.data);
  };

  const getAvailableSizes = (skuMapping) => {
    var availableSizes = [];
    skuMapping.forEach((sku) => {
      if (!availableSizes.includes(sku.size.size))
        availableSizes.push(sku.size.size);
    });
    return availableSizes;
  };

  const getAvailableColors = (skuMapping) => {
    var availableColors = [];
    skuMapping.forEach((sku) => {
      if (
        availableColors.findIndex((item) => item.id === sku.color.id) === -1
      ) {
        availableColors.push({
          id: sku.color.id,
          hexValue: sku.color.hexValue,
          color: sku.color.color,
        });
      }
    });
    return availableColors;
  };

  const updateMockup = async () => {
    setSpinnerState(true);
    axios
      .put(
        "https://spring-madrasda-2f6mra4vwa-em.a.run.app/api/mockup/upDateMockup/" +
          id,
        {
          name: name,
          productType: productType,
          category: category,
          model,
          model,
          additionalInformation: info,
          height: height,
          breadth: breadth,
          length: length,
          weight: weight,
          tax: tax,
          hsn: hsn,
          basePrice: base,
        }
      )
      .then(() => {
        setEdit(false);
        setSpinnerState(false);
        getMockupDetails();
        setOpen(true);
        setMessage("Updated Mockup Successfully");
        setSeverity("success");
      });
  };

  return (
    <>
      <Head>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/logo.png' />
        {details && <title>Madrasda | Edit Mockup | {details.name}</title>}
      </Head>
      <Backdrop
        sx={{ color: "#fff", zIndex: (theme) => theme.zIndex.drawer + 1 }}
        open={spinner}>
        <CircularProgress color='inherit' />
      </Backdrop>
      <Snackbar
        className={"mt-14"}
        open={open}
        autoHideDuration={1400}
        onClose={handleClose}
        anchorOrigin={{ vertical: "bottom", horizontal: "right" }}>
        <Alert onClose={handleClose} severity={severity}>
          {message}
        </Alert>
      </Snackbar>
      <AdminLayout>
        {details && (
          <section className='md:mx-40 py-12 px-16'>
            <h1 className='text-4xl'>{details.name}</h1>
            <h1 className='pt-6 text-xl'>Available Colors</h1>
            <div className='flex flex-wrap space-x-2 py-4'>
              {getAvailableColors(details.skuMapping).map((color) => {
                return (
                  <span
                    key={uuidv4()}
                    className={`border-black my-1 border-[1px] h-7 w-7 rounded-[100%] p-2`}
                    style={{ backgroundColor: color.hexValue }}
                    onClick={() => setCur(color.id)}></span>
                );
              })}
            </div>
            <h1 className='text-xl pt-5'>Available Images</h1>
            <div className='flex flex-wrap py-3'>
              {details.images.map((color) => (
                <Image
                  className=''
                  height={100}
                  width={100}
                  src={color.image}
                />
              ))}
            </div>
            {!edit && (
              <div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>Name</h1>
                  <h1>{details.name}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>Product Type</h1>
                  <h1>{details.productType}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>Category</h1>
                  <h1>{details.category}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>Model</h1>
                  <h1>{details.model}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>
                    Additional Information
                  </h1>
                  <h1>{details.additionalInformation}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>Height</h1>
                  <h1>{details.height}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>Breadth</h1>
                  <h1>{details.breadth}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>Length</h1>
                  <h1>{details.length}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>Weight</h1>
                  <h1>{details.weight}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>Tax</h1>
                  <h1>{details.tax}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>HSN</h1>
                  <h1>{details.hsn}</h1>
                </div>
                <div className='flex space-x-2'>
                  <h1 className='font-semibold text-lg'>Base Price</h1>
                  <h1>{details.basePrice}</h1>
                </div>
              </div>
            )}
            {edit && (
              <form>
                <div className='flex flex-col'>
                  <Input
                    type='text'
                    placeholder={details.name}
                    className='p-3 m-3'
                    onChange={(e) => setName(e.target.value)}
                  />
                  <Input
                    type='text'
                    placeholder={details.productType}
                    className='p-3 m-3'
                    onChange={(e) => setProdType(e.target.value)}
                  />
                  <InputLabel
                    id='category-dropdown'
                    className='font-medium text-xl pb-3 my-auto'>
                    Audience
                  </InputLabel>
                  <Select
                    value={model}
                    id='category-dropdown'
                    className='w-1/5'
                    onChange={(e) => setModel(e.target.value)}>
                    <MenuItem disabled value=''>
                      Choose Model
                    </MenuItem>
                    <MenuItem value={"Men"}>Men</MenuItem>
                    <MenuItem value={"Women"}>Women</MenuItem>
                    <MenuItem value={"Kids"}>Kids</MenuItem>
                  </Select>
                  <textarea
                    type='text'
                    placeholder={details.additionalInformation}
                    className='p-3 m-3 w-full'
                    onChange={(e) => setInfo(e.target.value)}
                  />
                  <Input
                    type='number'
                    placeholder={details.height}
                    className='p-3 m-3'
                    onChange={(e) => setHeight(e.target.value)}
                  />
                  <Input
                    type='number'
                    placeholder={details.breadth}
                    className='p-3 m-3'
                    onChange={(e) => setBreadth(e.target.value)}
                  />
                  <Input
                    type='number'
                    placeholder={details.length}
                    className='p-3 m-3'
                    onChange={(e) => setLength(e.target.value)}
                  />
                  <Input
                    type='number'
                    placeholder={details.weight}
                    className='p-3 m-3'
                    onChange={(e) => setWeight(e.target.value)}
                  />
                  <Input
                    type='number'
                    placeholder={details.tax}
                    className='p-3 m-3'
                    onChange={(e) => setTax(e.target.value)}
                  />
                  <Input
                    type='number'
                    placeholder={details.hsn}
                    className='p-3 m-3'
                    onChange={(e) => setHsn(e.target.value)}
                  />
                  <Input
                    type='number'
                    placeholder={details.basePrice}
                    className='p-3 m-3'
                    onChange={(e) => setBase(e.target.value)}
                  />
                </div>
              </form>
            )}
            {!edit && (
              <Button
                variant='contained'
                className='bg-primary'
                onClick={() => setEdit(true)}>
                <Edit /> Edit Mockup
              </Button>
            )}
            {edit && (
              <div className='space-x-4'>
                <Button
                  variant='contained'
                  className='bg-primary'
                  onClick={updateMockup}>
                  <Upload /> Save Mockup
                </Button>
                <Button
                  variant='contained'
                  className='bg-red hover:bg-error'
                  onClick={() => setEdit(false)}>
                  Cancel
                </Button>
              </div>
            )}
          </section>
        )}
      </AdminLayout>
    </>
  );
}
