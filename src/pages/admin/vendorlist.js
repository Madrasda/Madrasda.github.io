import Head from "next/head";
import Link from "next/link";
import axios from "axios";
import Image from "next/image";
import AdminLayout from "@/components/layout-admin";
import AddVendorModal from "@/components/addvendor-modal";
import VendorListItem from "@/components/vendorlist-item";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { storage } from "../../firebaseConfig";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { v4 } from "uuid";
import { isTokenValid } from "@/utils/JWTVerifier";
import CloseConfirm from "@/components/close-confirm-modal";

export default function VendorList(props) {
  const router = useRouter();
  const [tokenExists, setTokenExists] = useState(false);
  const [vendors, setVendors] = useState(null);
  const [imageUrl, setImage] = useState("");
  const [vendorData, setVendor] = useState({});
  let isReady = router.isReady;
  const [loading, setLoading] = useState(false);
    useEffect(() => {
        setLoading(true);
        setTimeout(() => {
        setLoading(false);
        }, 1000);
    }, []);
  const getVendors = async () => {
    axios.get(
      "http://localhost:8080/api/admin/getVendors"
    ).then((response) => {
      setVendors(response.data);
    }).catch((err)=>{
      console.log(err);
    })
  };

  const handleSubmit = (formData) => {
      registerVendor(formData);
  }

  const uploadImageOnline = async (file) => {
    const imageRef = ref(storage, `vendors/${file.name + v4()}`);
    await uploadBytes(imageRef, file);
    const url = await getDownloadURL(imageRef);
    return url;
  }


  const registerVendor = async (data) => {
    console.log(data.imgUrl);
    const url = await uploadImageOnline(data.imgUrl);
        axios.post(
        "http://localhost:8080/api/admin/addVendor",
        {
          ...data, imgUrl : url
        }
        ).then((response) => {
          console.log(response);
          getVendors();
        }).catch((err)=>{
          console.log(err);
        })
  };

  const deleteVendor = async (vendorId) => {
    const response = await axios.delete(
      "http://localhost:8080/api/admin/deleteVendor/" + vendorId , {
        headers : {
          Authorization : "Bearer " + localStorage.getItem('token')
        }
      }
    );
    getVendors();
  }


  useEffect(() => {
      const jwtToken = localStorage.getItem("token")
      if(jwtToken === undefined || !isTokenValid(jwtToken))
        router.push("/admin");
      else{
        setTokenExists(true);
        getVendors();
      }
    }, []);

    if(loading && isReady)
    return (<div className='z-50 h-screen w-screen overflow-hidden'>
    <Image src="/loader.gif" width={1920} height={1080}/>
    </div>);
  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.png" />
        <title>Madrasda | Vendor List</title>
      </Head>

      <AdminLayout>
        <section
          className="body-font overflow-hidden font-algeria
                        md:ml-32"
        >
          <div className="px-10 my-15 mx-auto">
            <h1 className="text-3xl text-primary 
                       md:ml-20 m-5">MY VENDORS</h1>
            <div className="flex flex-wrap md:ml-14">
              <div className="lg:w-1/6 md:w-1/2 p-4 w-4/6 lg:h-80 md:h-96 h-80 flex items-center justify-center m-5 rounded duration-200 ease-in-out">
                <Link href="#">
                  <div className="flex flex-col items-center justify-center cursor-pointer">
                    <AddVendorModal getFormData={handleSubmit} />
                    <p className="font-semibold text-base text-center">
                      Add new vendor
                    </p>
                    <p className="font-light text-gray text-sm text-center">
                      Add new vendors to your list
                    </p>
                  </div>
                </Link>
              </div>

              {vendors &&
                vendors.map((vendor) => (
                  <div className="lg:w-1/6 md:w-1/2 p-4 pb-0 min-h-full h-72 cursor-pointer bg-off-white m-5 rounded drop-shadow-[4px_4px_10px_rgba(0,0,0,0.2)] hover:drop-shadow-[8px_8px_4px_rgba(0,0,0,0.3)] duration-200 ease-in-out">
                    <span className="w-full ml-5 flex justify-end">
                      <CloseConfirm vendor={true} delete={(e) => {if(e) deleteVendor(vendor.id)}} />
                    </span>
                    <Link href={`/admin/vendorDetails/${vendor.id}`}>
                      <VendorListItem
                      key={vendor.id}
                      vendorName={vendor.name}
                      image={vendor.imgUrl}
                    />
                    </Link>
                  </div>
                ))}
            </div>
          </div>
        </section>
      </AdminLayout>
    </>
  );
}
