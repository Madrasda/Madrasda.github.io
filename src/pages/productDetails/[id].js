import Head from 'next/head';
import Image from 'next/image';
import ClientLayout from "@/components/layout-client";
import {useRouter} from "next/router";
import React, {useContext, useEffect, useRef, useState} from 'react';
import {UserContext} from "../../../context/context";
import axios from "axios";
import ColorOption from "../../components/ColorOption";
import {uuidv4} from "@firebase/util";
import {getRole, isTokenValid} from '@/utils/JWTVerifier';
import HotSellers from '@/components/hotsellers-client';

export default function ProductId() {

    const router = useRouter();
    const ctx = useContext(UserContext);
    const [quantity, setQuantity] = useState(1);
    const [loading, setLoading] = useState(false);
    const [client, setClient] = useState(false);
    const [activeImage, setActiveImage] = useState("https://www.futurelifenow-online.com/wp-content/uploads/2022/12/loading-gif.gif");
    const [message, setMessage] = useState("");
    const [severity, setSeverity] = useState("");
    const [open, setOpen] = useState(false);
    const qtyRef = useRef();
    let isReady = router.isReady;
    const [currentColor, setCurrentColor] = useState({
        id: 0, color: "", hexValue: "", images: [""], sizes: [{
            id: 0, size: "", sku: ""
        }]
    });
    const [currentSize, setCurrentSize] = useState({
        id: 0, size: "", sku: ""
    });
    const [product, setProduct] = useState({
        colors: [currentColor],
        description: "",
        discount: 0,
        id: 0,
        name: "",
        profit: 0,
        publishStatus: false,
        theme: "",
        total: 0,
        vendorId: 0,
        vendorImg: ""
    });
    const handleIncrement = () => {
        setQuantity(quantity + 1);
    };

    const handleDecrement = () => {
        if (quantity > 1) {
            setQuantity(quantity - 1);
        }
    };
    const handleAddToCart = async () => {
        const color = {...currentColor, sizes: [currentSize]};

        const addToCartItem = {
            id: product.id, colors: [color], quantity: qtyRef.current.value
        }
        const status = await ctx.addToCart(addToCartItem);

        setOpen(true);
        if (status === 200) {
            setMessage("Added To Cart!");
            setSeverity("success");
        } else {
            setMessage("Error Adding To Cart!");
            setSeverity("error");
        }
    };
    useEffect(() => {
        setLoading(true);
        if (isReady) {
            const {id} = router.query;
            axios.get("https://spring-madrasda-2f6mra4vwa-em.a.run.app/api/product/getProductDetails/" + id)
                .then(response => {
                    setProduct(response.data)
                    return response.data
                })
                .then((product) => {
                    setCurrentColor(product.colors[0])
                    return product.colors[0];
                })
                .then((color) => {
                    setActiveImage(color.images[0])
                    return color.sizes;
                })
                .then((sizes) => setCurrentSize(sizes[0]))
                .then(() => setLoading(false))
                .catch(err => console.log(err));
        }
    }, [isReady]);

    useEffect(() => {
        const jwtToken = localStorage.getItem('token');
        if (jwtToken && getRole(jwtToken) === "ROLE_ADMIN")
            router.push("/admin");
        if (jwtToken && getRole(jwtToken) === "ROLE_VENDOR")
            router.push("/vendor");
        if (jwtToken && isTokenValid(jwtToken))
            setClient(true);
        else
            setClient(false);
    }, []);

    if (loading && isReady) return (<div className='z-50 h-screen w-screen overflow-hidden'>
        <Image src="/loader.gif" width={1920} height={1080} alt={"img"}
               className="object-cover object-center w-full h-full"/>
    </div>);

    const handleSetColor = (color) => {
        setCurrentColor(color);
        setCurrentSize(color.sizes[0]);
        setActiveImage(color.images[0]);
    };
    return (<>
        <Head>
            <meta name="description" content="Generated by create next app"/>
            <meta name="viewport" content="width=device-width, initial-scale=1"/>
            <link rel="icon" href="/logo.png"/>
            <title>Madrasda | View Product</title>
        </Head>

        {isReady && <ClientLayout client={client} state={open} severity={severity} message={message} setState={setOpen}>
            <section className="text-black body-font font-algeria overflow-hidden">
                <div className="px-5 pt-24 mx-auto flex justify-center">
                    <div className="flex justify-start flex-row flex-wrap md:flex-nowrap">
                        <div className="flex flex-col items-center justify-center
                          lg:flex-row-reverse w-full">
                            <img
                                alt="ecommerce"
                                className="w-full lg:h-[620px] h-96 object-contain aspect-16/9 object-center rounded px-2"
                                src={activeImage}
                            />
                            <div className='flex flex-row justify-center items-center
                            lg:flex-col'>
                                {currentColor.images.map((image) => (<img
                                    alt="ecommerce"
                                    key={uuidv4()}
                                    className="w-24 lg:w-44 aspect-16/9 m-2 object-contain"
                                    src={image}
                                    onClick={() => setActiveImage(image)}
                                />))}
                            </div>
                        </div>
                        <div className="lg:w-1/2 w-full lg:pl-10 lg:py-6 mt-6 lg:mt-0">
                            <h2 className="text-sm title-font text-gray-500 tracking-widest">
                                {/*{product.theme !== undefined ? product.theme : ""}*/}
                            </h2>
                            <h1 className="text-gray-900 text-3xl title-font font-medium mb-1">
                                {product.name}
                            </h1>
                            <span>
                                <h1>{product.description}</h1>
                            </span>
                            <div className="flex mb-4 items-center">
                            </div>
                            <div className='flex flex-row items-baseline'>
              <span className="title-font font-medium text-2xl text-gray-900 mr-2 flex justify-center">
                ₹{product.total * (100 - product.discount) / 100}
              </span>
                                <span className="title-font line-through font-small text-lg
                                text-gray-600 mr-2 flex justify-center">
                ₹{product.total}
              </span>
                                <span
                                    className='bg-primary rounded-lg mr-2 px-2 py-1 scale-75 text-base text-white flex justify-center'>
                {product.discount}% off
              </span>
                            </div>

                            <div className="mt-6">Colors</div>
                            <div className="flex items-center mt-3 mb-3">
                                <div className="flex">
                                    {product.colors
                                        .map(color =>
                                            <ColorOption key={color.id}
                                                         hex={color.hexValue}
                                                         id={color.id}
                                                         color={color.color}
                                                         currentColor={color}
                                                         setColor={handleSetColor}
                                                         setImage={setActiveImage}
                                            />)}
                                </div>
                            </div>
                            <span
                                className="title-font font-medium underline text-black text-xs ml-64">Size Guide</span>
                            <div className="flex items-center">
                                <div className="relative">
                                    {currentColor.sizes.map(size => (<button
                                        key={size.id}
                                        onClick={() => {
                                            setCurrentSize(size)
                                        }}
                                        className={`px-4 py-2 m-3 text-black font-semibold rounded-lg shadow-lg transition-shadow
                                            ${size === currentSize ? 'bg-primary text-white' : 'bg-white hover:bg-off-white hover:shadow-gray'}
        `}
                                    >
                                        <input
                                            type="radio"
                                            id={size.id}
                                            name="size"
                                            value={size.size}
                                            checked={size.id === currentSize.id}
                                            onChange={() => setCurrentSize(size)}
                                            className="sr-only"
                                        />
                                        <label htmlFor={size.id}>{size.size}</label>
                                    </button>))}
                                </div>
                            </div>

                            <br></br>

                            <div className="flex items-center h-10 w-32">
                                <h2 className="w-full text-black mr-5 text-sm font-semibold">Qty</h2>
                                <div
                                    className="flex flex-row h-10 w-full rounded-lg relative bg-transparent mt-1">
                                    <button className=" bg-white text-center border border-gray text-primary hover:text-primary
                  hover:bg-gray h-full w-20 rounded-l cursor-pointer outline-none"
                                            onClick={handleDecrement}>
                                        <span className="m-auto text-2xl font-thin"> - </span>
                                    </button>

                                    <input className="border border-gray focus:outline-none text-center w-full bg-white font-semibold text-md
                      hover:text-primary focus:text-primary md:text-basecursor-default flex items-center text-primary outline-none"
                                           value={quantity} ref={qtyRef} readOnly={true}></input>

                                    <button className="bg-white text-center border border-gray text-primary hover:text-primary
                          hover:bg-gray h-full w-20 rounded-r cursor-pointer"
                                            onClick={handleIncrement}>
                                        <span className="m-auto text-2xl font-thin"> + </span>
                                    </button>
                                </div>
                            </div>
                            <br></br>
                            <div className="flex">
                                <button
                                    className="flex ml-6 text-justify-center mr-10 text-white bg-[#a5153F] border-0 py-2 px-6
                       focus:outline-none hover:bg-primary rounded">
                                    Buy Now
                                </button>

                                <button
                                    className="flex ml-10 mr-10 text-justify-center text-white bg-[#a5153F]
                       border-0 py-2 px-6 focus:outline-none hover:bg-primary rounded"
                                    onClick={handleAddToCart}>
                                    Add to Cart
                                </button>
                            </div>
                            <br></br>
                        </div>
                    </div>
                </div>
            </section>
            <HotSellers/>

        </ClientLayout>}
    </>)
}
